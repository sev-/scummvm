/* ScummVM - Graphic Adventure Engine
 *
 * ScummVM is the legal property of its developers, whose names
 * are too numerous to list here. Please refer to the COPYRIGHT
 * file distributed with this source distribution.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 *
 * $URL$
 * $Id$
 *
 */

#include "prisoner/prisoner.h"
#include "prisoner/resource.h"
#include "prisoner/screen.h"

namespace Prisoner {

// NOTE: An alternative to hardcoding the data would be to save it to a separate
// data file and read it from there as this is saved in the .exe
const byte constPalette1[] = {
	0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF,
	0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF,
	0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF,
	0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x97, 0x13, 0x00, 0x9B,
	0x2F, 0x00, 0xA7, 0x3F, 0x13, 0xAF, 0x4B, 0x1B, 0xB7, 0x5B, 0x27, 0xBF, 0x67,
	0x37, 0xC3, 0x73, 0x43, 0xCB, 0x7F, 0x53, 0xD3, 0x8F, 0x5F, 0xDB, 0x9B, 0x6F,
	0xDF, 0xAB, 0x83, 0xE7, 0xBB, 0x93, 0xEF, 0xC7, 0xA7, 0xF7, 0xD7, 0xBB, 0xFF,
	0xE7, 0xCF, 0xFF, 0xF3, 0xDF, 0x27, 0x27, 0x27, 0x33, 0x33, 0x33, 0x43, 0x43,
	0x43, 0x4F, 0x4F, 0x4F, 0x5B, 0x5B, 0x5B, 0x6B, 0x6B, 0x6B, 0x77, 0x77, 0x77,
	0x87, 0x87, 0x87, 0x93, 0x93, 0x93, 0xA3, 0xA3, 0xA3, 0xAF, 0xAF, 0xAF, 0xBF,
	0xBF, 0xBF, 0xCB, 0xCB, 0xCB, 0xDB, 0xDB, 0xDB, 0xE7, 0xE7, 0xE7, 0xF7, 0xF7,
	0xF7, 0x23, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x5F, 0x00, 0x00, 0x7F, 0x00, 0x00,
	0x9F, 0x00, 0x00, 0xBF, 0x00, 0x00, 0xDF, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x2F,
	0x2B, 0x1F, 0x43, 0x3F, 0x2B, 0x57, 0x53, 0x37, 0x6B, 0x63, 0x43, 0x7F, 0x77,
	0x4F, 0x93, 0x87, 0x5B, 0xA7, 0x9B, 0x6B, 0xBB, 0xAF, 0x77, 0x1B, 0x07, 0x00,
	0x2F, 0x0F, 0x00, 0x43, 0x17, 0x00, 0x57, 0x23, 0x07, 0x6B, 0x2F, 0x0B, 0x7F,
	0x3F, 0x13, 0x93, 0x4F, 0x17, 0xAB, 0x63, 0x23, 0xB7, 0x77, 0x2F, 0xC7, 0x8B,
	0x3F, 0xD3, 0xA3, 0x53, 0xE3, 0xBB, 0x67, 0xEF, 0xCB, 0x7F, 0xF7, 0xDB, 0x93,
	0xFF, 0xEF, 0xA7, 0xFF, 0xF3, 0xDB, 0x2B, 0x1F, 0x17, 0x3B, 0x2B, 0x1F, 0x4B,
	0x33, 0x27, 0x5B, 0x3F, 0x2F, 0x6F, 0x4B, 0x37, 0x7F, 0x53, 0x3F, 0x8F, 0x5F,
	0x43, 0x9F, 0x67, 0x4B, 0xAB, 0x73, 0x57, 0xB7, 0x83, 0x67, 0xC7, 0x93, 0x7B,
	0xD3, 0xA3, 0x8F, 0xE3, 0xB7, 0xA3, 0xEF, 0xCB, 0xB7, 0xFF, 0xDF, 0xCF, 0xFF,
	0xEB, 0xE3, 0x07, 0x07, 0x07, 0x13, 0x13, 0x13, 0x1F, 0x23, 0x23, 0x2B, 0x33,
	0x2F, 0x33, 0x43, 0x3F, 0x3B, 0x53, 0x4B, 0x43, 0x63, 0x57, 0x4F, 0x73, 0x67,
	0x5F, 0x83, 0x77, 0x6F, 0x97, 0x87, 0x7B, 0xA7, 0x97, 0x8F, 0xB7, 0xA7, 0x9F,
	0xCB, 0xB7, 0xAF, 0xDB, 0xCB, 0xC3, 0xEB, 0xDB, 0xD7, 0xFF, 0xEF, 0x13, 0x17,
	0x1F, 0x1B, 0x1F, 0x2B, 0x23, 0x27, 0x37, 0x2B, 0x2F, 0x43, 0x37, 0x3B, 0x4F,
	0x3F, 0x47, 0x5F, 0x4B, 0x57, 0x6B, 0x57, 0x63, 0x7B, 0x67, 0x6F, 0x87, 0x77,
	0x83, 0x9B, 0x8B, 0x97, 0xAF, 0x9F, 0xAB, 0xC3, 0xB3, 0xC3, 0xD7, 0xC7, 0xD7,
	0xEB, 0xD7, 0xE7, 0xF7, 0xE7, 0xF3, 0xFF, 0x07, 0x13, 0x1F, 0x0B, 0x1B, 0x2F,
	0x13, 0x27, 0x3F, 0x1B, 0x33, 0x4F, 0x23, 0x3F, 0x5F, 0x2B, 0x4B, 0x73, 0x37,
	0x57, 0x83, 0x43, 0x63, 0x93, 0x4F, 0x73, 0xA3, 0x5B, 0x7F, 0xB3, 0x6B, 0x8F,
	0xC7, 0x83, 0xA7, 0xD7, 0x9F, 0xBF, 0xE3, 0xBF, 0xD7, 0xEF, 0xD7, 0xE7, 0xF7,
	0xEB, 0xF3, 0xFF, 0x1F, 0x0F, 0x00, 0x33, 0x1B, 0x00, 0x4B, 0x27, 0x00, 0x63,
	0x33, 0x00, 0x7B, 0x3F, 0x07, 0x8F, 0x4F, 0x07, 0xA7, 0x5B, 0x0B, 0xBF, 0x6B,
	0x0F, 0xD7, 0x7B, 0x13, 0xDB, 0x93, 0x27, 0xDF, 0xAB, 0x3F, 0xE7, 0xBF, 0x57,
	0xEB, 0xD3, 0x6F, 0xF3, 0xE3, 0x8B, 0xF7, 0xF3, 0xA3, 0xFF, 0xFF, 0xC3, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEF, 0xCB, 0xB7, 0xE3, 0xB7,
	0xA3, 0xFF, 0xF3, 0xDB, 0xD7, 0xE7, 0xF7, 0xEB, 0xF3, 0xFF, 0xC7, 0xD7, 0xEB,
	0xCB, 0xCB, 0xCB, 0xDB, 0xDB, 0xDB, 0xE7, 0xE7, 0xE7, 0xF7, 0xF7, 0xF7, 0xFF,
	0xEB, 0xE3, 0x9F, 0xAB, 0xC3, 0x93, 0x93, 0x93, 0x6B, 0x6B, 0x6B, 0xFF, 0xFF,
	0xFF
};


/* Palette */

void PrisonerEngine::setPalette(Common::String &pakName, int16 pakSlot) {
	int16 paletteResourceCacheSlot = _res->load<PaletteResource>(pakName, pakSlot, 6);
	PaletteResource *paletteResource = _res->get<PaletteResource>(paletteResourceCacheSlot);
	memcpy(_effectPalette, paletteResource->getPalette(), 768);
	memcpy(_scenePalette, paletteResource->getPalette(), 768);
	_scenePaletteOk = true;
	_effectPaletteOk = true;
	_screen->buildPaletteTransTable(paletteResource->getPalette(), 0);
	_res->unload(paletteResourceCacheSlot);
	_needToUpdatePalette = true;
}

void PrisonerEngine::fadeInOutColor(byte *source, int16 fadeDirection, int16 fadeR, int16 fadeG, int16 fadeB, int16 fadePosition) {
	if (fadeDirection == 1)
		fadePosition = 255 - fadePosition;
	byte *dst = _effectPalette;
	for (int i = 0; i < 240; i++) {
		byte r = *source++;
		byte g = *source++;
		byte b = *source++;
		*dst++ = (((fadeR - r) * fadePosition) >> 8) + r;
		*dst++ = (((fadeG - g) * fadePosition) >> 8) + g;
		*dst++ = (((fadeB - b) * fadePosition) >> 8) + b;
	}
}

void PrisonerEngine::alarmPalette(byte *source) {
	byte *dst = _effectPalette;
	*dst++ = *source++;
	*dst++ = *source++;
	*dst++ = *source++;
	for (int i = 1; i < 240; i++) {
		*dst++ = *source++;
		*dst++ = MAX(*source++ - _alarmPaletteSub, 0);
		*dst++ = MAX(*source++ - _alarmPaletteSub, 0);
	}
	_alarmPaletteSub += _alarmPaletteSubDelta;
	if (_alarmPaletteSub <= 10 || _alarmPaletteSub >= 80)
		_alarmPaletteSubDelta = -_alarmPaletteSubDelta;
}

void PrisonerEngine::startPaletteTask(int16 type, int16 value1, int16 value2, int16 value3) {

	switch (type) {
	case 3:
		_paletteTasks[1].active = true;
		_paletteTasks[1].positionIncr = value3;
		_paletteTasks[1].updateTicks = value3;
		debug(1, "alarm: %d, %d, %d", value1, value2, value3);
		break;
	case 4:
		_paletteTasks[1].active = false;
		break;
	case 7:
		_paletteTasks[3].active = true;
		fadeInOutColor(_scenePalette, value2 & 0xFF, (value1 & 0xFF00) >> 8, value1 & 0xFF, (value2 & 0xFF00) >> 8, 0);
		_paletteTasks[3].value2 = value1;
		_paletteTasks[3].value3 = value2;
		if (value3 > 255) {
			_paletteTasks[3].positionIncr = 1;
			_paletteTasks[3].updateTicks = value3 / 255;
		} else {
			_paletteTasks[3].positionIncr = 255 / value3;
			_paletteTasks[3].updateTicks = 1;
		}
		_fadeInOutColorUpdateTicks = _paletteTasks[3].updateTicks;
		_fadeInOutColorPosition = 0;
		break;
	case 8:
	case 9:
		_paletteTasks[3].active = false;
		fadeInOutColor(_scenePalette, _paletteTasks[3].value3 & 0xFF, (_paletteTasks[3].value2 & 0xFF00) >> 8,
			_paletteTasks[3].value2 & 0x00FF, (_paletteTasks[3].value3 & 0xFF00) >> 8, 255);
		_screen->setFullPalette(_effectPalette);
		break;
	case 10:
		unloadBackground();
		break;
	default:
		break;
	}

}

void PrisonerEngine::updatePaletteTasks() {

	if (_paletteTasks[1].active) {
		_paletteTasks[1].updateTicks -= _frameTicks;
		if (_paletteTasks[1].updateTicks <= 0) {
			_paletteTasks[1].updateTicks = _paletteTasks[1].positionIncr;
			alarmPalette(_scenePalette);
			_needToUpdatePalette = true;
		}
	}

	if (_paletteTasks[3].active) {
		_paletteTasks[3].updateTicks -= _frameTicks;
		if (_paletteTasks[3].updateTicks <= 0) {
			_paletteTasks[3].updateTicks = _fadeInOutColorUpdateTicks;
			_fadeInOutColorPosition += _paletteTasks[3].positionIncr;
			if (_fadeInOutColorPosition > 255) {
				_fadeInOutColorPosition = 255;
				_paletteTasks[3].active = false;
			}
			fadeInOutColor(_scenePalette, _paletteTasks[3].value3 & 0xFF, (_paletteTasks[3].value2 & 0xFF00) >> 8,
				_paletteTasks[3].value2 & 0x00FF, (_paletteTasks[3].value3 & 0xFF00) >> 8,
				_fadeInOutColorPosition);
			_needToUpdatePalette = true;
		}
	}

}

void PrisonerEngine::clearPaletteTasks() {
	for (int16 i = 0; i < kMaxPaletteTasks; i++) {
		_paletteTasks[i].active = false;
		_paletteTasks[i].value1 = -1;
	}
}

} // End of namespace Prisoner
